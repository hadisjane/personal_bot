#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telethon import TelegramClient

from utils.json_storage import JsonStorage
from config import config

logger = logging.getLogger(__name__)

class SystemHandler:
    def __init__(self, client: TelegramClient, storage: JsonStorage):
        self.client = client
        self.storage = storage
    
    async def handle_cancel(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        try:
            await self.storage.increment_command_usage('cancel')
            
            cancel_type = event.pattern_match.group(1).strip().lower()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞
            # –≠—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–ª–∏ dependency injection
            from main import bot_instance  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            
            cancelled_count = 0
            
            if cancel_type == 'timer':
                cancelled_count = await bot_instance.timer_handler.cancel_timers()
                await event.edit(f"{config.SUCCESS_EMOJI} –û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} —Ç–∞–π–º–µ—Ä–æ–≤")
                
            elif cancel_type == 'wake':
                alarm_count = await bot_instance.wake_handler.cancel_alarms()
                reminder_count = await bot_instance.wake_handler.cancel_reminders()
                cancelled_count = alarm_count + reminder_count
                await event.edit(f"{config.SUCCESS_EMOJI} –û—Ç–º–µ–Ω–µ–Ω–æ {alarm_count} –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –∏ {reminder_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                
            elif cancel_type == 'mention':
                cancelled_count = await bot_instance.mention_handler.cancel_mentions()
                await event.edit(f"{config.SUCCESS_EMOJI} –û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π/—Å–ø–∞–º–∞")
                
            elif cancel_type == 'all':
                timer_count = await bot_instance.timer_handler.cancel_timers()
                alarm_count = await bot_instance.wake_handler.cancel_alarms()
                reminder_count = await bot_instance.wake_handler.cancel_reminders()
                mention_count = await bot_instance.mention_handler.cancel_mentions()
                
                total_count = timer_count + alarm_count + reminder_count + mention_count
                
                message = f"""
{config.SUCCESS_EMOJI} **–û—Ç–º–µ–Ω–µ–Ω–æ –≤—Å—ë:**
‚Ä¢ –¢–∞–π–º–µ—Ä—ã: {timer_count}
‚Ä¢ –ë—É–¥–∏–ª—å–Ω–∏–∫–∏: {alarm_count}  
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_count}
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è/—Å–ø–∞–º: {mention_count}

**–í—Å–µ–≥–æ: {total_count}**
                """.strip()
                
                await event.edit(message)
            else:
                await event.edit(f"{config.ERROR_EMOJI} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {cancel_type}")
                return
            
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} –∑–∞–¥–∞—á —Ç–∏–ø–∞ {cancel_type}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_cancel: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ!")
    
    async def handle_list(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list"""
        try:
            await self.storage.increment_command_usage('list')
            
            list_type = 'all'
            match = event.pattern_match.group(1)
            if match:
                list_type = match.strip().lower()
            
            from main import bot_instance  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            
            message_parts = []
            
            if list_type in ['timers', 'all']:
                timers = await bot_instance.timer_handler.get_active_timers()
                if timers:
                    message_parts.append(f"‚è∞ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã ({len(timers)}):**")
                    for i, timer in enumerate(timers[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
                        start_time = datetime.fromisoformat(timer['start_time'])
                        elapsed = (datetime.now() - start_time).total_seconds()
                        remaining = timer['duration'] - elapsed
                        
                        if remaining > 0:
                            remaining_str = self._format_time(int(remaining))
                            message_parts.append(f"  {i}. –û—Å—Ç–∞–ª–æ—Å—å {remaining_str}")
                        else:
                            message_parts.append(f"  {i}. –î–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è")
                else:
                    if list_type == 'timers':
                        message_parts.append("‚è∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –Ω–µ—Ç")
            
            if list_type in ['wake', 'all']:
                alarms = await bot_instance.wake_handler.get_active_alarms()
                reminders = await bot_instance.wake_handler.get_active_reminders()
                
                total_wake = len(alarms) + len(reminders)
                if total_wake > 0:
                    message_parts.append(f"\nüîî **–ë—É–¥–∏–ª—å–Ω–∏–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({total_wake}):**")
                    
                    # –ë—É–¥–∏–ª—å–Ω–∏–∫–∏
                    for i, alarm in enumerate(alarms[:3], 1):
                        start_time = datetime.fromisoformat(alarm['start_time'])
                        elapsed = (datetime.now() - start_time).total_seconds()
                        remaining = alarm['duration'] - elapsed
                        
                        if remaining > 0:
                            remaining_str = self._format_time(int(remaining))
                            message_parts.append(f"  {i}. üîî –ë—É–¥–∏–ª—å–Ω–∏–∫ —á–µ—Ä–µ–∑ {remaining_str}")
                    
                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    for i, reminder in enumerate(reminders[:3], len(alarms) + 1):
                        start_time = datetime.fromisoformat(reminder['start_time'])
                        elapsed = (datetime.now() - start_time).total_seconds()
                        remaining = reminder['duration'] - elapsed
                        
                        if remaining > 0:
                            remaining_str = self._format_time(int(remaining))
                            text = reminder.get('text', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
                            short_text = text[:30] + "..." if len(text) > 30 else text
                            message_parts.append(f"  {i}. üí≠ {short_text} —á–µ—Ä–µ–∑ {remaining_str}")
                else:
                    if list_type == 'wake':
                        message_parts.append("üîî –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –Ω–µ—Ç")
            
            if list_type in ['mention', 'all']:
                mentions = await bot_instance.mention_handler.get_active_mentions()
                if mentions:
                    message_parts.append(f"\nüë§ **–ê–∫—Ç–∏–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è/—Å–ø–∞–º ({len(mentions)}):**")
                    for i, mention in enumerate(mentions[:3], 1):
                        if mention['type'] == 'mention':
                            username = mention.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                            count = mention.get('count', 0)
                            message_parts.append(f"  {i}. –£–ø–æ–º–∏–Ω–∞–Ω–∏—è {username} ({count} —Ä–∞–∑)")
                        else:  # spam
                            text = mention.get('text', '—Ç–µ–∫—Å—Ç')
                            short_text = text[:20] + "..." if len(text) > 20 else text
                            count = mention.get('count', 0)
                            message_parts.append(f"  {i}. –°–ø–∞–º \"{short_text}\" ({count} —Ä–∞–∑)")
                else:
                    if list_type == 'mention':
                        message_parts.append("üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç")
            
            if not message_parts:
                message = f"{config.INFO_EMOJI} –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç"
            else:
                message = "\n".join(message_parts)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω
                total_items = len(message_parts) - message_parts.count("")
                if total_items > 10:  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                    message += f"\n\n{config.INFO_EMOJI} –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"
            
            await event.edit(message)
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫: {list_type}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_list: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞!")
    
    def _format_time(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds}—Å"
        elif seconds < 3600:
            minutes = seconds // 60
            secs = seconds % 60
            return f"{minutes}–º {secs}—Å" if secs > 0 else f"{minutes}–º"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            if minutes > 0:
                return f"{hours}—á {minutes}–º"
            else:
                return f"{hours}—á"
    
    async def handle_ping(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ping"""
        try:
            await self.storage.increment_command_usage('ping')
            
            start_time = time.time()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            message = await event.edit("üèì Pong!")
            
            end_time = time.time()
            response_time = round((end_time - start_time) * 1000, 2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–∫–ª–∏–∫–∞
            await message.edit(f"üèì Pong! `{response_time}ms`")
            
            logger.info(f"Ping: {response_time}ms")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ping: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–Ω–≥–∞!")
    
    async def handle_uptime(self, event, start_time: datetime):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /uptime"""
        try:
            await self.storage.increment_command_usage('uptime')
            
            uptime = datetime.now() - start_time
            days = uptime.days
            hours = uptime.seconds // 3600
            minutes = (uptime.seconds % 3600) // 60
            seconds = uptime.seconds % 60
            
            uptime_parts = []
            if days > 0:
                uptime_parts.append(f"{days}–¥")
            if hours > 0:
                uptime_parts.append(f"{hours}—á")
            if minutes > 0:
                uptime_parts.append(f"{minutes}–º")
            if seconds > 0 or not uptime_parts:
                uptime_parts.append(f"{seconds}—Å")
            
            uptime_str = " ".join(uptime_parts)
            
            message = f"""
üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞**

‚è∞ –ó–∞–ø—É—â–µ–Ω: {start_time.strftime('%d.%m.%Y %H:%M:%S')}
‚åõ –†–∞–±–æ—Ç–∞–µ—Ç: {uptime_str}
            """.strip()
            
            await event.edit(message)
            
            logger.info(f"Uptime: {uptime_str}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_uptime: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã!")
    
    async def handle_stats(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            await self.storage.increment_command_usage('stats')
            
            stats = await self.storage.get_stats()
            
            # –¢–æ–ø –∫–æ–º–∞–Ω–¥
            commands = stats.get('commands_used', {})
            if commands:
                sorted_commands = sorted(commands.items(), key=lambda x: x[1], reverse=True)
                top_commands = sorted_commands[:5]
                
                top_commands_str = []
                for cmd, count in top_commands:
                    top_commands_str.append(f"  ‚Ä¢ /{cmd}: {count}")
            else:
                top_commands_str = ["  ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]
            
            # –°—á–µ—Ç—á–∏–∫–∏
            total_commands = stats.get('total_commands', 0)
            timers_created = stats.get('timers_created', 0)
            alarms_created = stats.get('alarms_created', 0)
            mentions_created = stats.get('mentions_created', 0)
            
            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
            last_command = stats.get('last_command_time')
            if last_command:
                last_command_dt = datetime.fromisoformat(last_command)
                last_command_str = last_command_dt.strftime('%d.%m.%Y %H:%M:%S')
            else:
                last_command_str = "–ù–∏–∫–æ–≥–¥–∞"
            
            message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üìà **–û–±—â–µ–µ:**
‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_commands}
‚Ä¢ –¢–∞–π–º–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {timers_created}
‚Ä¢ –ë—É–¥–∏–ª—å–Ω–∏–∫–æ–≤: {alarms_created}
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–π: {mentions_created}

üèÜ **–¢–æ–ø –∫–æ–º–∞–Ω–¥:**
{chr(10).join(top_commands_str)}

üïê **–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞:** {last_command_str}
            """.strip()
            
            await event.edit(message)
            
            logger.info("–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_stats: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
    
    async def handle_help(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            await self.storage.increment_command_usage('help')
            
            help_text = f"""
ü§ñ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram –ë–æ—Ç**

‚è∞ **–¢–∞–π–º–µ—Ä—ã:**
‚Ä¢ `/timer 30s` - —Ç–∞–π–º–µ—Ä —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
‚Ä¢ `/timer 5m 100` - —Ç–∞–π–º–µ—Ä + —Å–ø–∞–º 100 —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ `/countdown 60` - –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç

üîî **–ë—É–¥–∏–ª—å–Ω–∏–∫–∏:**
‚Ä¢ `/wake 10m` - –±—É–¥–∏–ª—å–Ω–∏–∫ (10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–°)
‚Ä¢ `/wake 30m 50` - –±—É–¥–∏–ª—å–Ω–∏–∫ —Å 50 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
‚Ä¢ `/remind 5m "–∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"` - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

üë• **–£–ø–æ–º–∏–Ω–∞–Ω–∏—è:**
‚Ä¢ `/mention @user 30` - —É–ø–æ–º—è–Ω—É—Ç—å 30 —Ä–∞–∑
‚Ä¢ `/mention @user 5 2s` - —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2—Å
‚Ä¢ `/spam "—Ç–µ–∫—Å—Ç" 10` - —Å–ø–∞–º —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ `/spam @user "–ø—Ä–∏–≤–µ—Ç" 5` - —Å–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

üé≠ **–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**
‚Ä¢ `/quote` - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
‚Ä¢ `/joke` - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞  
‚Ä¢ `/ascii "HELLO"` - ASCII –∞—Ä—Ç
‚Ä¢ `/rps –∫–∞–º–µ–Ω—å` - –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
‚Ä¢ `/coin` - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
‚Ä¢ `/dice 20` - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ (1-20)
‚Ä¢ `/8ball "–≤–æ–ø—Ä–æ—Å?"` - –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä
‚Ä¢ `/random 1 100` - —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
‚Ä¢ `/meme` - —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º

üßÆ **–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `/calc 2+2*5` - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
‚Ä¢ `/hash "—Ç–µ–∫—Å—Ç"` - MD5 —Ö–µ—à
‚Ä¢ `/hash sha256 "—Ç–µ–∫—Å—Ç"` - SHA256 —Ö–µ—à

‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/cancel timer` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã
‚Ä¢ `/cancel wake` - –æ—Ç–º–µ–Ω–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫–∏
‚Ä¢ `/cancel mention` - –æ—Ç–º–µ–Ω–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ `/cancel all` - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë
‚Ä¢ `/list all` - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ `/ping` - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
‚Ä¢ `/uptime` - –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/stop` - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞

üìñ **–ï–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏:**
‚Ä¢ `s` - —Å–µ–∫—É–Ω–¥—ã (30s)
‚Ä¢ `m` - –º–∏–Ω—É—Ç—ã (5m)
‚Ä¢ `h` - —á–∞—Å—ã (2h)  
‚Ä¢ `d` - –¥–Ω–∏ (1d)

{config.INFO_EMOJI} –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≤–∞—à–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!
            """.strip()
            
            await event.edit(help_text)
            
            logger.info("–ü–æ–∫–∞–∑–∞–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_help: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏!")
    
    async def handle_backup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /backup (—Å–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞)"""
        try:
            backup_dir = await self.storage.create_backup()
            
            if backup_dir:
                await event.edit(f"{config.SUCCESS_EMOJI} –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø–∞–ø–∫–µ: `{backup_dir}`")
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_dir}")
            else:
                await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_backup: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!")