#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import random
import re
import hashlib
import json
import os
from typing import Dict, List, Optional
from telethon import TelegramClient

from utils.json_storage import JsonStorage
from config import config

logger = logging.getLogger(__name__)

class FunHandler:
    def __init__(self, bot):
        self.bot = bot
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.quotes = self._load_quotes()
        self.jokes = self._load_jokes()
        self.ascii_templates = self._load_ascii_templates()
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä
        self.rps_choices = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞', 'rock', 'paper', 'scissors']
        self.rps_mapping = {
            '–∫–∞–º–µ–Ω—å': 'rock', '–Ω–æ–∂–Ω–∏—Ü—ã': 'scissors', '–±—É–º–∞–≥–∞': 'paper',
            'rock': 'rock', 'scissors': 'scissors', 'paper': 'paper'
        }
        
        self.ball_responses = [
            "üîÆ –ë–µ—Å—Å–ø–æ—Ä–Ω–æ!", "üîÆ –ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ!", "üîÆ –ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π!",
            "üîÆ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞!", "üîÆ –ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º!",
            "üîÆ –ú–æ–π –æ—Ç–≤–µ—Ç - –¥–∞!", "üîÆ –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ!", "üîÆ –•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã!",
            "üîÆ –ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - –¥–∞!", "üîÆ –î–∞!", "üîÆ –ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
            "üîÆ –°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ!", "üîÆ –õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å!", "üîÆ –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å!",
            "üîÆ –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å!", "üîÆ –ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ!",
            "üîÆ –ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç!", "üîÆ –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - –Ω–µ—Ç!",
            "üîÆ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ!", "üîÆ –í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ!"
        ]
    
    def _load_quotes(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(config.QUOTES_FILE):
                with open(config.QUOTES_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('quotes', [])
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã: {e}")
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return [
            "üí° –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ - —ç—Ç–æ –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å. - –°—Ç–∏–≤ –î–∂–æ–±—Å",
            "üí° –ñ–∏–∑–Ω—å - —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å —Ç–æ–±–æ–π, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã. - –î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω", 
            "üí° –ë—É–¥—å —Å–æ–±–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã. - –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
            "üí° –£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. - –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
            "üí° –ù–µ –±–æ–π—Å—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –æ—à–∏–±–∫–∏. –ë–æ–π—Å—è –Ω–µ —É—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∏—Ö.",
            "üí° –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è - —Å–µ–π—á–∞—Å.",
            "üí° –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–¥—Ç–∏ –±—ã—Å—Ç—Ä–æ - –∏–¥–∏ –æ–¥–∏–Ω. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–¥—Ç–∏ –¥–∞–ª–µ–∫–æ - –∏–¥–∏—Ç–µ –≤–º–µ—Å—Ç–µ."
        ]
    
    def _load_jokes(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à—É—Ç–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(config.JOKES_FILE):
                with open(config.JOKES_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('jokes', [])
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—É—Ç–∫–∏: {e}")
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à—É—Ç–∫–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω  
        return [
            "üòÑ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤!",
            "üòÑ - –ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∫—É—Ä—Å–∏—è? - –ê —á—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∫—É—Ä—Å–∏—è?",
            "üòÑ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–æ–º–æ–π. –ñ–µ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç: - –°—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, –∫—É–ø–∏ —Ö–ª–µ–±, –µ—Å–ª–∏ –±—É–¥—É—Ç —è–π—Ü–∞ - –≤–æ–∑—å–º–∏ –¥–µ—Å—è—Ç–æ–∫. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –¥–µ—Å—è—Ç—å—é –±–∞—Ç–æ–Ω–∞–º–∏ —Ö–ª–µ–±–∞. - –ó–∞—á–µ–º —Å—Ç–æ–ª—å–∫–æ? - –Ø–π—Ü–∞ –±—ã–ª–∏...",
            "üòÑ HTTP 418: –Ø —á–∞–π–Ω–∏–∫! ‚òï",
            "üòÑ - –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É? - –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞!",
            "üòÑ 99 –±–∞–≥–æ–≤ –≤ –∫–æ–¥–µ, 99 –±–∞–≥–æ–≤! –ò—Å–ø—Ä–∞–≤—å –æ–¥–∏–Ω, –∑–∞–ø—É—à–∏ –≤ main... 127 –±–∞–≥–æ–≤ –≤ –∫–æ–¥–µ!",
            "üòÑ –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ 10 —Ç–∏–ø–æ–≤ –ª—é–¥–µ–π –≤ –º–∏—Ä–µ: —Ç–µ, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –∏ —Ç–µ, –∫—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç."
        ]
    
    def _load_ascii_templates(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã ASCII –∞—Ä—Ç–∞"""
        try:
            if os.path.exists(config.ASCII_ART_FILE):
                with open(config.ASCII_ART_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ASCII –∞—Ä—Ç: {e}")
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        return {
            "HELLO": """
 _   _ _____ _     _     ___  
| | | | ____| |   | |   / _ \ 
| |_| |  _| | |   | |  | | | |
|  _  | |___| |___| |__| |_| |
|_| |_|_____|_____|_____\___/ 
            """,
            "OK": """
 _____ _   _ 
|  _  | | / /
| | | | |/ / 
| |_| |    \ 
 \___/|_|\_\ 
            """
        }
    
    async def handle_quote(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /quote"""
        try:
            self.bot.storage.increment_command_usage('quote')
            
            quote = random.choice(self.quotes)
            await event.edit(quote)
            
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_quote: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã!")
    
    async def handle_joke(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /joke"""
        try:
            self.bot.storage.increment_command_usage('joke')
            
            joke = random.choice(self.jokes)
            await event.edit(joke)
            
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_joke: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏!")
    
    async def handle_ascii(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ascii"""
        try:
            self.bot.storage.increment_command_usage('ascii')
            
            text = event.pattern_match.group(1).strip().upper()
            
            if not text:
                await event.edit(f"{config.ERROR_EMOJI} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ascii \"–¢–ï–ö–°–¢\"")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            if text in self.ascii_templates:
                ascii_art = self.ascii_templates[text]
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π ASCII –∞—Ä—Ç
                ascii_art = self._generate_simple_ascii(text)
            
            await event.edit(f"```\n{ascii_art}\n```")
            
            logger.info(f"–°–æ–∑–¥–∞–Ω ASCII –∞—Ä—Ç –¥–ª—è: {text}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ascii: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ASCII –∞—Ä—Ç–∞!")
    
    def _generate_simple_ascii(self, text: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π ASCII –∞—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–æ–π ASCII –∞—Ä—Ç - –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –≤ —Ä–∞–º–∫–µ
        lines = ["", "", ""]
        
        for char in text:
            if char == ' ':
                lines[0] += "   "
                lines[1] += "   "
                lines[2] += "   "
            else:
                lines[0] += f"‚îå‚îÄ‚îê"
                lines[1] += f"‚îÇ{char}‚îÇ"
                lines[2] += f"‚îî‚îÄ‚îò"
        
        return "\n".join(lines)
    
    async def handle_rps(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rps (–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞)"""
        try:
            self.bot.storage.increment_command_usage('rps')
            
            user_choice = event.pattern_match.group(1).strip().lower()
            
            if user_choice not in self.rps_choices:
                await event.edit(f"{config.ERROR_EMOJI} –í—ã–±–µ—Ä–∏—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞")
                return
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_normalized = self.rps_mapping[user_choice]
            
            # –í—ã–±–æ—Ä –±–æ—Ç–∞
            bot_choices = ['rock', 'paper', 'scissors']
            bot_choice = random.choice(bot_choices)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            choice_names = {'rock': '–∫–∞–º–µ–Ω—å', 'paper': '–±—É–º–∞–≥–∞', 'scissors': '–Ω–æ–∂–Ω–∏—Ü—ã'}
            choice_emojis = {'rock': 'üóø', 'paper': 'üìÑ', 'scissors': '‚úÇÔ∏è'}
            
            user_display = choice_names[user_normalized]
            bot_display = choice_names[bot_choice]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if user_normalized == bot_choice:
                result = "ü§ù –ù–∏—á—å—è!"
            elif (user_normalized == 'rock' and bot_choice == 'scissors') or \
                 (user_normalized == 'paper' and bot_choice == 'rock') or \
                 (user_normalized == 'scissors' and bot_choice == 'paper'):
                result = "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
            else:
                result = "üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
            
            message = f"""
üéÆ **–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞**

–í—ã: {choice_emojis[user_normalized]} {user_display}
–ë–æ—Ç: {choice_emojis[bot_choice]} {bot_display}

{result}
            """.strip()
            
            await event.edit(message)
            
            logger.info(f"RPS: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display}, –±–æ—Ç {bot_display}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_rps: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ!")
    
    async def handle_coin(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /coin"""
        try:
            self.bot.storage.increment_command_usage('coin')
            
            result = random.choice(['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞'])
            emoji = 'ü¶Ö' if result == '–æ—Ä–µ–ª' else 'üëë'
            
            await event.edit(f"ü™ô –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É...\n\n{emoji} **{result.upper()}**!")
            
            logger.info(f"–ú–æ–Ω–µ—Ç–∫–∞: {result}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_coin: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç–∫–∏!")
    
    async def handle_dice(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /dice"""
        try:
            self.bot.storage.increment_command_usage('dice')
            
            # –ü–∞—Ä—Å–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            max_value = 6  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–π –∫—É–±–∏–∫
            match = event.pattern_match.group(1)
            if match:
                try:
                    max_value = int(match.strip())
                    if max_value < 2:
                        max_value = 2
                    elif max_value > 1000:
                        max_value = 1000
                except ValueError:
                    await event.edit(f"{config.ERROR_EMOJI} –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ!")
                    return
            
            result = random.randint(1, max_value)
            
            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if max_value == 6:
                dice_emojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ']
                emoji = dice_emojis[result - 1]
            else:
                emoji = 'üé≤'
            
            await event.edit(f"üé≤ –ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫ (1-{max_value})...\n\n{emoji} **{result}**!")
            
            logger.info(f"–ö—É–±–∏–∫ 1-{max_value}: {result}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_dice: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞!")
    
    async def handle_8ball(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /8ball"""
        try:
            self.bot.storage.increment_command_usage('8ball')
            
            question = event.pattern_match.group(1).strip()
            
            if not question:
                await event.edit(f"{config.ERROR_EMOJI} –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /8ball \"–≤–∞—à –≤–æ–ø—Ä–æ—Å?\"")
                return
            
            if not question.endswith('?'):
                question += '?'
            
            response = random.choice(self.ball_responses)
            
            message = f"""
üé± **–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π**

‚ùì *{question}*

{response}
            """.strip()
            
            await event.edit(message)
            
            logger.info(f"8ball –≤–æ–ø—Ä–æ—Å: {question[:50]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_8ball: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –≤ –º–∞–≥–∏—á–µ—Å–∫–æ–º —à–∞—Ä–µ!")
    
    async def handle_random(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random"""
        try:
            self.bot.storage.increment_command_usage('random')
            
            # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω
            min_val = 1
            max_val = 100
            
            match1 = event.pattern_match.group(1)  # –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
            match2 = event.pattern_match.group(2)  # –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
            
            if match1:
                try:
                    if match2:
                        # –î–≤–∞ —á–∏—Å–ª–∞: /random 10 50
                        min_val = int(match1)
                        max_val = int(match2)
                    else:
                        # –û–¥–Ω–æ —á–∏—Å–ª–æ: /random 50 (–æ—Ç 1 –¥–æ 50)
                        max_val = int(match1)
                except ValueError:
                    await event.edit(f"{config.ERROR_EMOJI} –ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞!")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            if min_val > max_val:
                min_val, max_val = max_val, min_val
            
            if max_val - min_val > 1000000:
                await event.edit(f"{config.ERROR_EMOJI} –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω!")
                return
            
            result = random.randint(min_val, max_val)
            
            await event.edit(f"üé∞ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}:\n\nüéØ **{result}**")
            
            logger.info(f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ {min_val}-{max_val}: {result}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_random: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∏—Å–ª–∞!")
    
    async def handle_hash(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /hash"""
        try:
            self.bot.storage.increment_command_usage('hash')
            
            text = event.pattern_match.group(1).strip()
            
            # –ò—â–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –∏ —Ç–µ–∫—Å—Ç
            # –§–æ—Ä–º–∞—Ç: [algo] "text" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "text"
            parts = re.match(r'^(sha1|sha256|sha512|md5)\s+"?([^"]+)"?$', text, re.IGNORECASE)
            
            if parts:
                algo = parts.group(1).lower()
                text_to_hash = parts.group(2)
            else:
                # –ï—Å–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é md5
                algo = 'md5'
                text_to_hash = text.strip('"')

            if not text_to_hash:
                await event.edit(f"{config.ERROR_EMOJI} –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: `/hash \"–º–æ–π —Ç–µ–∫—Å—Ç\"`")
                return

            h = hashlib.new(algo)
            h.update(text_to_hash.encode('utf-8'))
            hashed_text = h.hexdigest()

            message = f"""
üßÆ **–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ**

–ê–ª–≥–æ—Ä–∏—Ç–º: `{algo.upper()}`
–•–µ—à: `{hashed_text}`
            """.strip()

            await event.edit(message)
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ö–µ—à {algo} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text_to_hash[:20]}...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_hash: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏!")

    async def handle_calc(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /calc"""
        try:
            self.bot.storage.increment_command_usage('calc')
            
            expression = event.pattern_match.group(1).strip()
            
            if not expression:
                await event.edit(f"{config.ERROR_EMOJI} –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /calc 2+2*5")
                return
            
            # –û—á–∏—â–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            safe_expression = self._sanitize_math_expression(expression)
            
            if not safe_expression:
                await event.edit(f"{config.ERROR_EMOJI} –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏!")
                return
            
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
                result = eval(safe_expression, {"__builtins__": {}}, {
                    "abs": abs, "round": round, "min": min, "max": max,
                    "pow": pow, "sqrt": lambda x: x**0.5
                })
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if isinstance(result, float):
                    if result.is_integer():
                        result = int(result)
                    else:
                        result = round(result, 8)
                
                await event.edit(f"üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä**\n\n`{expression}` = **{result}**")
                
                logger.info(f"–í—ã—á–∏—Å–ª–µ–Ω–∏–µ: {expression} = {result}")
                
            except ZeroDivisionError:
                await event.edit(f"{config.ERROR_EMOJI} –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
            except (ValueError, TypeError, SyntaxError):
                await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏!")
            except Exception:
                await event.edit(f"{config.ERROR_EMOJI} –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_calc: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ!")
    
    def _sanitize_math_expression(self, expression: str) -> Optional[str]:
        """–û—á–∏—â–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: —Ü–∏—Ñ—Ä—ã, –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, —Å–∫–æ–±–∫–∏, —Ç–æ—á–∫–∞
        allowed_chars = set('0123456789+-*/().% ')
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        allowed_functions = ['abs', 'round', 'min', 'max', 'pow', 'sqrt']
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã
        clean_expr = ''.join(c for c in expression if c in allowed_chars or c.isalpha())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        forbidden_words = ['import', 'exec', 'eval', 'open', 'file', '__']
        for word in forbidden_words:
            if word in clean_expr.lower():
                return None
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã
        clean_expr = clean_expr.replace('^', '**')  # –°—Ç–µ–ø–µ–Ω—å
        
        return clean_expr if clean_expr else None
    
    async def handle_morning(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /morning [—Ç–∏–ø]"""
        try:
            self.bot.storage.increment_command_usage('morning')
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å None, –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ)
            args = event.pattern_match.group(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç –µ—Å—Ç—å, –Ω–µ –ø—É—Å—Ç–æ–π –∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 3
            if not args or not args.strip().isdigit() or int(args.strip()) not in [1, 2, 3]:
                await event.edit(
                    f"{config.ERROR_EMOJI} –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (1-3):\n"
                    "1. –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –≤—Å–µ–º\n"
                    "2. –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –¥—Ä—É–≥—É/–∫–µ–Ω—Ç—É\n"
                    "3. –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –¥–µ–≤—É—à–∫–µ/–ø–æ–¥—Ä—É–≥–µ"
                )
                return

            msg_type = int(args.strip())
            
            # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            messages = {
                1: [
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –≤—Å–µ–º! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚òÄÔ∏è",
                    "–í—Å–µ–º –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞ –∏ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üåû",
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –Ω–∞—Ä–æ–¥! –ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º! üåÖ",
                    "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º! –ñ–µ–ª–∞—é –≤—Å–µ–º —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! üåÑ",
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ–º–ø–∞–Ω–∏—è! –î–∞ –±—É–¥–µ—Ç –¥–µ–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º! üåá"
                ],
                2: [
                    "–ü—Ä–∏–≤–µ—Ç, –±—Ä–∞—Ç! –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ —Å–ø–∞–ª–æ—Å—å?",
                    "–≠–π, –∫–µ–Ω—Ç! –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –¥–Ω—é?",
                    "–ô–æ—É, –¥—Ä—É–∂–∏—â–µ! –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ —Å–∞–º?",
                    "–ü—Ä–∏–≤–µ—Ç, –±—Ä–∞—Ç–∞–Ω! –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
                    "–≠–π, –∫–æ—Ä–µ—à! –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ –≤—ã—Å–ø–∞–ª—Å—è?"
                ],
                3: [
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–æ–ª–Ω—ã—à–∫–æ! –•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –¥–Ω—è! üíñ",
                    "–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–∞–≤–∏—Ü–∞! –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåπ",
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Ä–æ–¥–Ω–∞—è! –ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —á—É–¥–µ—Å–Ω—ã–º! üíï",
                    "–ü—Ä–∏–≤–µ—Ç, –∑–∞–π–∫–∞! –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ —Å–ø–∞–ª–æ—Å—å? üå∏",
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ª—é–±–∏–º–∞—è! –•–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üíù"
                ]
            }
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            message = random.choice(messages[msg_type])
            await event.edit(message)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {msg_type}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_morning: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!")
    
    async def handle_hash(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /hash"""
        try:
            self.bot.storage.increment_command_usage('hash')
            
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
            args = event.text.split(' ', 2)
            if len(args) < 2:
                await event.edit(f"{config.ERROR_EMOJI} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /hash \"—Ç–µ–∫—Å—Ç\" –∏–ª–∏ /hash md5 \"—Ç–µ–∫—Å—Ç\"")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ö–µ—à–∞ –∏ —Ç–µ–∫—Å—Ç
            if len(args) == 2:
                hash_type = 'md5'
                text = args[1].strip('"\'')
            else:
                hash_type = args[1].lower()
                text = args[2].strip('"\'')
            
            if not text:
                await event.edit(f"{config.ERROR_EMOJI} –¢–µ–∫—Å—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
            text_bytes = text.encode('utf-8')
            
            if hash_type == 'md5':
                hash_result = hashlib.md5(text_bytes).hexdigest()
            elif hash_type == 'sha1':
                hash_result = hashlib.sha1(text_bytes).hexdigest()
            elif hash_type == 'sha256':
                hash_result = hashlib.sha256(text_bytes).hexdigest()
            elif hash_type == 'sha512':
                hash_result = hashlib.sha512(text_bytes).hexdigest()
            else:
                await event.edit(f"{config.ERROR_EMOJI} –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: md5, sha1, sha256, sha512")
                return
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            display_text = text if len(text) <= 50 else text[:47] + "..."
            
            message = f"""
üîê **–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ {hash_type.upper()}**

üìù –¢–µ–∫—Å—Ç: `{display_text}`
üîë –•–µ—à: `{hash_result}`
            """.strip()
            
            await event.edit(message)
            
            logger.info(f"–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ {hash_type}: —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_hash: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏!")
    
    async def handle_meme(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /meme"""
        try:
            self.bot.storage.increment_command_usage('meme')
            
            memes = [
                "üê∏ It's Wednesday, my dudes!",
                "üî• This is fine. üî•",
                "üìà Stonks üìà",
                "üöÄ To the moon! üöÄ",
                "üíé Diamond hands! üíéüôå",
                "üìâ Buy the dip! üìâ",
                "ü§ñ Beep boop, I'm a bot!",
                "‚ö° Unlimited power! ‚ö°",
                "üéØ Task failed successfully!",
                "üíª It works on my machine!",
                "üêõ It's not a bug, it's a feature!",
                "‚òï Have you tried turning it off and on again?",
                "üîÑ Loading... 99%",
                "‚ùå Error 404: Motivation not found",
                "üéÆ Git gud!",
                "üèÜ Achievement unlocked: Procrastination Master!",
            ]
            
            meme = random.choice(memes)
            await event.edit(meme)
            
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_meme: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞!")
    
    async def save_custom_content(self, content_type: str, content: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        try:
            if content_type == 'quote':
                self.quotes.append(content)
                await self._save_quotes()
            elif content_type == 'joke':
                self.jokes.append(content)
                await self._save_jokes()
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π {content_type}: {content[:50]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {content_type}: {e}")
    
    async def _save_quotes(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–∏—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(config.QUOTES_FILE), exist_ok=True)
            with open(config.QUOTES_FILE, 'w', encoding='utf-8') as f:
                json.dump({'quotes': self.quotes}, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç: {e}")
    
    async def _save_jokes(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à—É—Ç–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(config.JOKES_FILE), exist_ok=True)
            with open(config.JOKES_FILE, 'w', encoding='utf-8') as f:
                json.dump({'jokes': self.jokes}, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à—É—Ç–æ–∫: {e}")