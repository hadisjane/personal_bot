#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import logging
import os
import random
from typing import Optional

from telethon import events
from telethon.tl import types

from config import config

logger = logging.getLogger(__name__)

class InteractionsHandler:
    def __init__(self, bot):
        self.bot = bot
        self.interactions = self._load_interactions()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π")
    
    def _load_interactions(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(config.INTERACTIONS_FILE):
                logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π –∏–∑ {config.INTERACTIONS_FILE}")
                with open(config.INTERACTIONS_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data.get('insults', []))} –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π –∏ {len(data.get('roasts', []))} '–ø—Ä–æ–∂–∞—Ä–∏–≤–∞–Ω–∏–π'")
                    return data
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π: {e}", exc_info=True)
        
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π")
        return {"insults": [], "roasts": [], "ship": {}, "compliment": []}
    
    async def _get_user_mention(self, event, user_entity=None, username=None, first_name=None, target_text=None):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º
        :param event: –°–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞)
        :param user_entity: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telethon (–µ—Å–ª–∏ –µ—Å—Ç—å)
        :param username: –Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)
        :param first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target_text: –¢–µ–∫—Å—Ç —Ü–µ–ª–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å @username –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
        """
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if user_entity:
                display_name = getattr(user_entity, 'first_name', None) or \
                             getattr(user_entity, 'username', None) or \
                             f"user{user_entity.id}" if hasattr(user_entity, 'id') else "–∫—Ç–æ-—Ç–æ"
                return f"[{display_name}](tg://user?id={user_entity.id})"
                
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏
            if target_text is not None:
                # –ï—Å–ª–∏ —ç—Ç–æ —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @), –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if target_text.startswith('@'):
                    try:
                        user = await event.client.get_entity(target_text)
                        if user:
                            display_name = getattr(user, 'first_name', None) or target_text[1:]
                            return f"[{display_name}](tg://user?id={user.id})"
                    except Exception as e:
                        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_text}: {e}")
                    return target_text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                return target_text
                
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ username, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å @
            if username:
                return f"@{username}"
                
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if first_name:
                return first_name
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _get_user_mention: {e}", exc_info=True)
            
        return "–∫—Ç–æ-—Ç–æ"

    async def _get_target_name(self, event, target: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Ü–µ–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏
        :param event: –°–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param target: –¢–µ–∫—Å—Ç —Ü–µ–ª–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ü–µ–ª–∏
        """
        return await self._get_user_mention(event, target_text=target)

    async def _get_ship_message(self, target1: str, target2: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        :param target1: –ü–µ—Ä–≤–∞—è —Ü–µ–ª—å (—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Ç–µ–∫—Å—Ç)
        :param target2: –í—Ç–æ—Ä–∞—è —Ü–µ–ª—å (—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Ç–µ–∫—Å—Ç)
        :return: –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        percent = random.randint(1, 100)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        if percent > 90:
            category = "moreThan90"
        elif percent > 70:
            category = "between70And89"
        elif percent > 50:
            category = "between50And69"
        elif percent > 30:
            category = "between30And49"
        else:
            category = "lessThan30"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        messages = self.interactions.get("ship", {}).get(category, [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        header = f"üíò –ò—Å–ª–µ–¥—É–µ–º–∞—è –ø–∞—Ä–∞: {target1} –∏ {target2}:\n"
        header += f"üîÆ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {percent}%\n\n"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        if messages:
            message = random.choice(messages)
            message = message.format(
                target1=target1, 
                target2=target2, 
                percent=percent
            )
        else:
            message = f"{target1} –∏ {target2} - {percent}% —Å–æ–≤–º–µ—Å—Ç–∏–º—ã!"
        
        return header + message

    async def send_interaction(self, event, interaction_type: str, target: Optional[str] = None, target2: Optional[str] = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        :param event: –°–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param interaction_type: –¢–∏–ø –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏ (insult, roast, ship, compliment)
        :param target: –ü–µ—Ä–≤–∞—è —Ü–µ–ª—å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥)
        :param target2: –í—Ç–æ—Ä–∞—è —Ü–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è ship)
        """
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã {interaction_type} –¥–ª—è —Ü–µ–ª–∏: {target} –∏ {target2 or '–Ω–µ—Ç –≤—Ç–æ—Ä–æ–π —Ü–µ–ª–∏'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Ü–µ–ª—å
        if not target or not target.strip():
            usage_text = (
                f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{interaction_type} @username –∏–ª–∏ —Ç–µ–∫—Å—Ç\n"
            )
            await event.edit(usage_text)
            return
            
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ship
        if interaction_type == "ship":
            if not target2 or not target2.strip():
                await event.edit("‚ö†Ô∏è –î–ª—è ship –Ω—É–∂–Ω—ã –¥–≤–µ —Ü–µ–ª–∏!\n–ü—Ä–∏–º–µ—Ä: /ship @user1 @user2")
                return
                
            try:
                target1_name = await self._get_target_name(event, target)
                target2_name = await self._get_target_name(event, target2)
                message = await self._get_ship_message(target1_name, target2_name)
                await event.edit(message)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ship: {message[:100]}...")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ship: {e}", exc_info=True)
                await event.edit("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã ship.")
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –æ–¥–Ω–æ–π —Ü–µ–ª—å—é (insult, roast, compliment)
        interactions = self.interactions.get(interaction_type, [])
        if not interactions:
            error_msg = f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π —Ç–∏–ø–∞: {interaction_type}"
            logger.error(error_msg)
            await event.edit("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        try:
            target_name = await self._get_target_name(event, target)
            logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è —Ü–µ–ª–∏: {target_name}")
            
            message = random.choice(interactions).format(target=target_name)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ {interaction_type}: {message[:100]}...")
            
            await event.edit(message)
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã {interaction_type}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            try:
                await event.edit("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
            except:
                logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ", exc_info=True)

def setup(bot):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞"""
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π")
    return InteractionsHandler(bot)