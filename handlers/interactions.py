#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import logging
import os
import random
from typing import Optional

from telethon import events
from telethon.tl import types

from config import config

logger = logging.getLogger(__name__)

class InteractionsHandler:
    def __init__(self, bot):
        self.bot = bot
        self.interactions = self._load_interactions()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π")
    
    def _load_interactions(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(config.INTERACTIONS_FILE):
                logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π –∏–∑ {config.INTERACTIONS_FILE}")
                with open(config.INTERACTIONS_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data.get('insults', []))} –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π –∏ {len(data.get('roasts', []))} '–ø—Ä–æ–∂–∞—Ä–∏–≤–∞–Ω–∏–π'")
                    return data
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π: {e}", exc_info=True)
        
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π")
        return {"insults": [], "roasts": [], "ship": {}, "compliment": []}
    
    async def _get_user_mention(self, event, user_entity=None, username=None, first_name=None, target_text=None):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º
        :param event: –°–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞)
        :param user_entity: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telethon (–µ—Å–ª–∏ –µ—Å—Ç—å)
        :param username: –Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)
        :param first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target_text: –¢–µ–∫—Å—Ç —Ü–µ–ª–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å @username –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
        """
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if user_entity:
                display_name = getattr(user_entity, 'first_name', None) or \
                             getattr(user_entity, 'username', None) or \
                             f"user{user_entity.id}" if hasattr(user_entity, 'id') else "–∫—Ç–æ-—Ç–æ"
                return f"[{display_name}](tg://user?id={user_entity.id})"
                
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏
            if target_text is not None:
                # –ï—Å–ª–∏ —ç—Ç–æ —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @), –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if target_text.startswith('@'):
                    try:
                        user = await event.client.get_entity(target_text)
                        if user:
                            display_name = getattr(user, 'first_name', None) or target_text[1:]
                            return f"[{display_name}](tg://user?id={user.id})"
                    except Exception as e:
                        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_text}: {e}")
                    return target_text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                return target_text
                
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ username, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å @
            if username:
                return f"@{username}"
                
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if first_name:
                return first_name
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _get_user_mention: {e}", exc_info=True)
            
        return "–∫—Ç–æ-—Ç–æ"

    async def _get_target_name(self, event, target: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Ü–µ–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏
        :param event: –°–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param target: –¢–µ–∫—Å—Ç —Ü–µ–ª–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ü–µ–ª–∏
        """
        return await self._get_user_mention(event, target_text=target)

    async def _get_gayrate_message(self, target: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≥–µ—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –¶–µ–ª—å (—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Ç–µ–∫—Å—Ç)
        :return: –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
        percent = random.randint(1, 100)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        if percent >= 90:
            category = "moreThan90"
        elif percent >= 70:
            category = "between70And89"
        elif percent >= 50:
            category = "between50And69"
        elif percent >= 30:
            category = "between30And49"
        else:
            category = "lessThan30"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        phrases = self.interactions.get("gayrate", {}).get(category, [])
        
        # –ï—Å–ª–∏ —Ñ—Ä–∞–∑ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not phrases:
            return f"üåà –ì–µ–π-—Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è {target}:\nüíñ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {percent}%\n\n{target} ‚Äî –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–ª—É—á–∞–π!"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–ª—å
        phrase = random.choice(phrases).format(target=target, percent=percent)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ —Ñ—Ä–∞–∑–µ
        if "%" not in phrase:
            return f"üåà –ì–µ–π-—Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è {target}:\nüíñ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {percent}%\n\n{phrase}"
        return phrase

    async def _get_commit_message(self, commit_type: str = None, custom_message: str = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–º–º–∏—Ç–µ
        :param commit_type: –¢–∏–ø –∫–æ–º–º–∏—Ç–∞ (feat, fix, docs –∏ —Ç.–¥.)
        :param custom_message: –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        :return: –°—Ç—Ä–æ–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –∫–æ–º–º–∏—Ç–µ
        """
        # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        if not commit_type or commit_type.lower() == 'random':
            commit_type = random.choice(list(self.interactions.get("commit", {}).keys()))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–º–∏—Ç–∞
        messages = self.interactions.get("commit", {}).get(commit_type, [])
        
        if not messages:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —à–∞–±–ª–æ–Ω
            commit_message = f"{commit_type}: {custom_message if custom_message else 'no message provided'}"
        else:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–º–∏—Ç–∞
            commit_message = random.choice(messages)
            if custom_message:
                commit_message = f"{commit_type}: {custom_message}"
            else:
                commit_message = f"{commit_type}: {commit_message}"
        
        return commit_message

    async def _get_define_message(self, event, target: str = None) -> str:
        # Get display name using the same method as other commands
        display_name = await self._get_target_name(event, target) if target else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        last_message = None
        
        # Try to get last message from the current chat if target is a user mention
        if target and target.startswith('@'):
            try:
                # Get the user entity from the mention
                username = target.lstrip('@')
                
                # First, try to find the user in the current chat
                chat = await event.get_chat()
                logger.info(f"–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∏–∫–æ–º @{username} –≤ —á–∞—Ç–µ {chat.id}")
                
                found_user = None
                async for user in event.client.iter_participants(chat):
                    logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {getattr(user, 'username', 'no_username')} (ID: {user.id})")
                    if user.username and user.username.lower() == username.lower():
                        found_user = user
                        logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.id})")
                        break
                
                if found_user:
                    # Search for the last message from this user
                    logger.info(f"–ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {found_user.id}")
                    try:
                        # First try to get the most recent message from the current chat
                        last_message = None
                        
                        # Search in current chat first
                        try:
                            messages = await event.client.get_messages(
                                chat,
                                from_user=found_user,
                                limit=100  # Get last 100 messages to find a good one
                            )
                            
                            # Find the first non-command message
                            for msg in messages:
                                if msg.text and msg.text.strip() and not msg.text.startswith('/'):
                                    last_message = msg.text
                                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_message}")
                                    break
                                
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                        
                        # If we have a message, truncate if needed
                        if last_message and len(last_message) > 100:
                            last_message = last_message[:97] + '...'
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                else:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {target}: {e}")
        
        # Get random elements from each category
        base_template = random.choice(self.interactions.get("define", {}).get("base", [""]))
        habitat = random.choice(self.interactions.get("define", {}).get("habitat", [""]))
        
        # Get 3 random synonyms
        synonyms = random.sample(
            self.interactions.get("define", {}).get("synonyms", []),
            min(3, len(self.interactions.get("define", {}).get("synonyms", [])))
        )
        
        # Format templates with display_name
        try:
            base = base_template.format(target=display_name, user=display_name)
        except (KeyError, IndexError):
            base = base_template
            
        fact_template = random.choice(self.interactions.get("define", {}).get("facts", [""]))
        note_template = random.choice(self.interactions.get("define", {}).get("notes", [""]))
        
        try:
            fact = fact_template.format(target=display_name, user=display_name)
        except (KeyError, IndexError):
            fact = fact_template
            
        try:
            note = note_template.format(target=display_name, user=display_name)
        except (KeyError, IndexError):
            note = note_template
            
        log_label = random.choice(self.interactions.get("define", {}).get("log_labels", [""]))
        
        # Generate random stats
        cringe_level = random.randint(1, 100)
        trust_rating = random.randint(-100, 100)
        
        # IQ with 15% chance of NaN and 1% chance of negative
        iq_roll = random.random()
        if iq_roll < 0.15:
            iq = "NaN"
        elif iq_roll < 0.16:  # 1% chance of negative
            iq = f"-{random.randint(1, 300)}"
        else:
            iq = str(random.randint(1, 200))
        
        # Format the message
        message_parts = [
            f"üìö {base}",
            habitat,
            "",
            f"–°–∏–Ω–æ–Ω–∏–º—ã: {', '.join(synonyms)}",
            f"–§–∞–∫—Ç: {fact}\n",
            f"{'' if any(word in note for word in ['–í–Ω–∏–º–∞–Ω–∏–µ:', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:', '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ:', '–í–∞–∂–Ω–æ:', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', '–ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏–µ:']) else '–ó–∞–º–µ—Ç–∫–∞: '}{note}",
            "",
            f"üìà –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏–Ω–∂–∞: {cringe_level}%",
            f"üîí –†–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è: {trust_rating}",
            f"üß† IQ –ø–æ –º–Ω–µ–Ω–∏—é –±–æ—Ç–∞: `{iq}`",
        ]
        
        if last_message:
            message_parts.append(f'üí¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{last_message}"')
        else:
            message_parts.append('üí¨ –£ –ø—Ä–∏–º–∞—Ç–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π')
            
        message_parts.append(f'üéñÔ∏è –ß–∞—â–µ –≤—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö –∫–∞–∫: `{log_label}`')
        
        return "\n".join(message_parts)

    async def _get_ship_message(self, target1: str, target2: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        :param target1: –ü–µ—Ä–≤–∞—è —Ü–µ–ª—å (—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Ç–µ–∫—Å—Ç)
        :param target2: –í—Ç–æ—Ä–∞—è —Ü–µ–ª—å (—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Ç–µ–∫—Å—Ç)
        :return: –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        percent = random.randint(1, 100)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        if percent > 90:
            category = "moreThan90"
        elif percent > 70:
            category = "between70And89"
        elif percent > 50:
            category = "between50And69"
        elif percent > 30:
            category = "between30And49"
        else:
            category = "lessThan30"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        messages = self.interactions.get("ship", {}).get(category, [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        header = f"üíò –ò—Å–ª–µ–¥—É–µ–º–∞—è –ø–∞—Ä–∞: {target1} –∏ {target2}:\n"
        header += f"üîÆ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {percent}%\n\n"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        if messages:
            message = random.choice(messages)
            message = message.format(
                target1=target1, 
                target2=target2, 
                percent=percent
            )
        else:
            message = f"{target1} –∏ {target2} - {percent}% —Å–æ–≤–º–µ—Å—Ç–∏–º—ã!"
        
        return header + message

    async def send_interaction(self, event, interaction_type: str, target: Optional[str] = None, target2: Optional[str] = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        :param event: –°–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param interaction_type: –¢–∏–ø –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏ (insult, roast, ship, compliment, gayrate)
        :param target: –ü–µ—Ä–≤–∞—è —Ü–µ–ª—å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥)
        :param target2: –í—Ç–æ—Ä–∞—è —Ü–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è ship)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª—å —É–∫–∞–∑–∞–Ω–∞ (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥, –≥–¥–µ –µ—Å—Ç—å —Å–≤–æ—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if not target and interaction_type not in ['ship', 'commit']:
                await event.edit(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{interaction_type} @username –∏–ª–∏ —Ç–µ–∫—Å—Ç")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É ship (–¥–≤–µ —Ü–µ–ª–∏)
            if interaction_type == 'ship':
                if not target or not target2:
                    await event.edit("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã /ship —É–∫–∞–∂–∏—Ç–µ –¥–≤–µ —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (—é–∑–µ—Ä–Ω–µ–π–º—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç).")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ü–µ–ª–µ–π
                target1_name = await self._get_target_name(event, target)
                target2_name = await self._get_target_name(event, target2)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                message = await self._get_ship_message(target1_name, target2_name)
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É commit
            elif interaction_type == 'commit':
                # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
                if not target:
                    help_text = (
                        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
                        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–º–º–∏—Ç–æ–≤:\n"
                        "‚Ä¢ `feat` - –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n"
                        "‚Ä¢ `fix` - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫\n"
                        "‚Ä¢ `docs` - –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
                        "‚Ä¢ `style` - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ\n"
                        "‚Ä¢ `refactor` - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞\n"
                        "‚Ä¢ `test` - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤\n"
                        "‚Ä¢ `chore` - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å–±–æ—Ä–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–∫–µ—Ç–æ–≤\n"
                        "‚Ä¢ `perf` - –∏–∑–º–µ–Ω–µ–Ω–∏—è, —É–ª—É—á—à–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
                        "‚Ä¢ `ci` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CI –∏ —Ä–∞–±–æ—Ç–∞ —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏\n"
                        "‚Ä¢ `random` - —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –∫–æ–º–º–∏—Ç–∞\n\n"
                        "üìå –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                        "‚Ä¢ `/commit feat –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É`\n"
                        "‚Ä¢ `/commit fix –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞`\n"
                        "‚Ä¢ `/commit random` - —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–º–∏—Ç"
                    )
                    await event.edit(help_text)
                    return
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–∏–ø –∏ —Ç–µ–∫—Å—Ç
                parts = target.split(' ', 1)
                commit_type = parts[0].lower()
                custom_message = parts[1] if len(parts) > 1 else None
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–º–º–∏—Ç–µ
                commit_message = await self._get_commit_message(commit_type, custom_message)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                sender = await event.get_sender()
                username = f"@{sender.username}" if hasattr(sender, 'username') and sender.username else "Unknown User"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                from datetime import datetime
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M")
                
                message = (
                    f"‚úÖ –ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω:\n"
                    f"üî® {commit_message}\n"
                    f"üïê –í—Ä–µ–º—è –∫–æ–º–º–∏—Ç–∞: {current_time}\n"
                    f"üß† –ê–≤—Ç–æ—Ä: {username}\n"
                    f"üìÅ –í–µ—Ç–∫–∞: main"
                )
                
                await event.edit(message)
                return
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É define
            elif interaction_type == 'define':
                if not target:
                    await event.edit("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /define @username –∏–ª–∏ /define —Ç–µ–∫—Å—Ç")
                    return
                    
                message = await self._get_define_message(event, target)
                await event.edit(message)
                return
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ü–µ–ª–∏
                target_name = await self._get_target_name(event, target)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
                message = await self._get_gayrate_message(target_name)
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ü–µ–ª–∏
                target_name = await self._get_target_name(event, target)
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                messages = self.interactions.get(interaction_type, [])
                if not messages:
                    await event.edit("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                    return
                
                message = random.choice(messages).format(target=target_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –∏—Å—Ö–æ–¥–Ω–æ–µ
            await event.edit(message)
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã {interaction_type}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            try:
                await event.edit("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
            except:
                logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ", exc_info=True)

def setup(bot):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞"""
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π")
    return InteractionsHandler(bot)