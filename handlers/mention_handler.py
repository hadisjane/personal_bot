#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import re
from datetime import datetime
from typing import Dict, List, Optional
from telethon import TelegramClient
from telethon.tl.types import Message

from utils.json_storage import JsonStorage
from utils.time_parser import TimeParser
from config import config

logger = logging.getLogger(__name__)

class MentionHandler:
    def __init__(self, bot):
        self.bot = bot
        self.active_mentions: Dict[str, asyncio.Task] = {}
        self.active_spam: Dict[str, asyncio.Task] = {}
    
    async def handle_mention(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mention"""
        try:
            args = event.pattern_match.group(1).strip().split()
            if len(args) < 2:
                await event.edit(f"{config.ERROR_EMOJI} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mention @username 30 [–∏–Ω—Ç–µ—Ä–≤–∞–ª]")
                return
            
            # –ü–∞—Ä—Å–∏–º username
            username = args[0]
            if not username.startswith('@'):
                await event.edit(f"{config.ERROR_EMOJI} Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
                return
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            try:
                mention_count = int(args[1])
                if mention_count <= 0:
                    await event.edit(f"{config.ERROR_EMOJI} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return
                if mention_count > config.MAX_MENTION_COUNT:
                    mention_count = config.MAX_MENTION_COUNT
                    await event.edit(f"{config.WARNING_EMOJI} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {config.MAX_MENTION_COUNT}")
                    await asyncio.sleep(1)
            except ValueError:
                await event.edit(f"{config.ERROR_EMOJI} –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π!")
                return
            
            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            interval = config.DEFAULT_MENTION_INTERVAL
            if len(args) > 2:
                interval_parsed = self.bot.time_parser.parse_interval(args[2])
                if interval_parsed is None:
                    await event.edit(f"{config.ERROR_EMOJI} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 1s, 500ms")
                    return
                interval = max(0.1, interval_parsed)  # –ú–∏–Ω–∏–º—É–º 100ms
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            mention_id = f"mention_{event.chat_id}_{event.id}_{datetime.now().timestamp()}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
            mention_data = {
                'id': mention_id,
                'chat_id': event.chat_id,
                'message_id': event.id,
                'username': username,
                'count': mention_count,
                'interval': interval,
                'start_time': datetime.now().isoformat(),
                'type': 'mention'
            }
            
            self.bot.storage.save_mention(mention_data)
            self.bot.storage.increment_mentions_created()
            self.bot.storage.increment_command_usage('mention')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            task = asyncio.create_task(self._run_mentions(event, username, mention_count, interval, mention_id))
            self.active_mentions[mention_id] = task
            
            await event.edit(f"{config.MENTION_EMOJI} –ù–∞—á–∏–Ω–∞—é —É–ø–æ–º–∏–Ω–∞—Ç—å {username} {mention_count} —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval}—Å")
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è {username} {mention_count} —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval}—Å")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_mention: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π!")
    
    async def _run_mentions(self, event, username: str, count: int, interval: float, mention_id: str):
        """–ó–∞–ø—É—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            for i in range(count):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –ª–∏ –∑–∞–¥–∞—á—É
                if mention_id not in self.active_mentions:
                    break
                
                await event.reply(f"{config.MENTION_EMOJI} {username}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < count - 1:
                    await asyncio.sleep(interval)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await event.edit(f"{config.SUCCESS_EMOJI} –£–ø–æ–º–∏–Ω–∞–Ω–∏—è {username} –∑–∞–≤–µ—Ä—à–µ–Ω—ã ({count} —Ä–∞–∑)")
            except:
                pass
            
            # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if mention_id in self.active_mentions:
                del self.active_mentions[mention_id]
            
            self.bot.storage.remove_mention(mention_id)
            
            logger.info(f"–£–ø–æ–º–∏–Ω–∞–Ω–∏—è {mention_id} –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except asyncio.CancelledError:
            logger.info(f"–£–ø–æ–º–∏–Ω–∞–Ω–∏—è {mention_id} –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
            try:
                await event.edit(f"{config.WARNING_EMOJI} –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
            except:
                pass
            if mention_id in self.active_mentions:
                del self.active_mentions[mention_id]
            self.bot.storage.remove_mention(mention_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö {mention_id}: {e}")
            try:
                await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –≤ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö!")
            except:
                pass
    
    async def handle_spam(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /spam"""
        try:
            full_text = event.pattern_match.group(1).strip()
            
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
            # /spam "—Ç–µ–∫—Å—Ç" 10
            # /spam @username "—Ç–µ–∫—Å—Ç" 10  
            # /spam —Ç–µ–∫—Å—Ç_–±–µ–∑_–ø—Ä–æ–±–µ–ª–æ–≤ 5
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
            parts = self._parse_spam_command(full_text)
            
            if not parts:
                await event.edit(f"{config.ERROR_EMOJI} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /spam \"—Ç–µ–∫—Å—Ç\" 10 –∏–ª–∏ /spam @username \"—Ç–µ–∫—Å—Ç\" 10")
                return
            
            target_user, spam_text, spam_count = parts
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            if spam_count > config.MAX_SPAM_COUNT:
                spam_count = config.MAX_SPAM_COUNT
                await event.edit(f"{config.WARNING_EMOJI} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {config.MAX_SPAM_COUNT}")
                await asyncio.sleep(1)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ø–∞–º–∞
            spam_id = f"spam_{event.chat_id}_{event.id}_{datetime.now().timestamp()}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∞–º–µ
            spam_data = {
                'id': spam_id,
                'chat_id': event.chat_id,
                'message_id': event.id,
                'target_user': target_user,
                'text': spam_text,
                'count': spam_count,
                'start_time': datetime.now().isoformat(),
                'type': 'spam'
            }
            
            self.bot.storage.save_mention(spam_data)
            self.bot.storage.increment_command_usage('spam')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∞–º
            task = asyncio.create_task(self._run_spam(event, target_user, spam_text, spam_count, spam_id))
            self.active_spam[spam_id] = task
            
            target_str = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user}" if target_user else "–≤ —á–∞—Ç"
            await event.edit(f"üí¨ –ù–∞—á–∏–Ω–∞—é —Å–ø–∞–º {target_str}: \"{spam_text}\" ({spam_count} —Ä–∞–∑)")
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω —Å–ø–∞–º: {spam_text} {spam_count} —Ä–∞–∑")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_spam: {e}")
            await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∞–º–∞!")
    
    def _parse_spam_command(self, text: str) -> Optional[tuple]:
        """–ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É —Å–ø–∞–º–∞"""
        try:
            # –ü–∞—Ç—Ç–µ—Ä–Ω 1: /spam @username "—Ç–µ–∫—Å—Ç" 10
            pattern1 = re.match(r'^(@\w+)\s+"([^"]+)"\s+(\d+)$', text)
            if pattern1:
                return pattern1.group(1), pattern1.group(2), int(pattern1.group(3))
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 2: /spam @username '—Ç–µ–∫—Å—Ç' 10  
            pattern2 = re.match(r"^(@\w+)\s+'([^']+)'\s+(\d+)$", text)
            if pattern2:
                return pattern2.group(1), pattern2.group(2), int(pattern2.group(3))
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 3: /spam "—Ç–µ–∫—Å—Ç" 10
            pattern3 = re.match(r'^"([^"]+)"\s+(\d+)$', text)
            if pattern3:
                return None, pattern3.group(1), int(pattern3.group(2))
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 4: /spam '—Ç–µ–∫—Å—Ç' 10
            pattern4 = re.match(r"^'([^']+)'\s+(\d+)$", text)
            if pattern4:
                return None, pattern4.group(1), int(pattern4.group(2))
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 5: /spam —Ç–µ–∫—Å—Ç_–±–µ–∑_–ø—Ä–æ–±–µ–ª–æ–≤ 10
            pattern5 = re.match(r'^(\S+)\s+(\d+)$', text)
            if pattern5 and not pattern5.group(1).startswith('@'):
                return None, pattern5.group(1), int(pattern5.group(2))
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 6: /spam @username —Ç–µ–∫—Å—Ç_–±–µ–∑_–ø—Ä–æ–±–µ–ª–æ–≤ 10
            pattern6 = re.match(r'^(@\w+)\s+(\S+)\s+(\d+)$', text)
            if pattern6:
                return pattern6.group(1), pattern6.group(2), int(pattern6.group(3))
            
            return None
            
        except (ValueError, AttributeError):
            return None
    
    async def _run_spam(self, event, target_user: Optional[str], text: str, count: int, spam_id: str):
        """–ó–∞–ø—É—Å–∫ —Å–ø–∞–º–∞"""
        try:
            for i in range(count):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –ª–∏ –∑–∞–¥–∞—á—É
                if spam_id not in self.active_spam:
                    break
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if target_user:
                    message = f"{target_user} {text}"
                else:
                    message = text
                
                await event.reply(message)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < count - 1:
                    await asyncio.sleep(0.2)  # 200ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                target_str = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user}" if target_user else "–≤ —á–∞—Ç"
                await event.edit(f"{config.SUCCESS_EMOJI} –°–ø–∞–º {target_str} –∑–∞–≤–µ—Ä—à–µ–Ω ({count} —Å–æ–æ–±—â–µ–Ω–∏–π)")
            except:
                pass
            
            # –£–¥–∞–ª—è–µ–º —Å–ø–∞–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if spam_id in self.active_spam:
                del self.active_spam[spam_id]
            
            self.bot.storage.remove_mention(spam_id)
            
            logger.info(f"–°–ø–∞–º {spam_id} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except asyncio.CancelledError:
            logger.info(f"–°–ø–∞–º {spam_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
            try:
                await event.edit(f"{config.WARNING_EMOJI} –°–ø–∞–º –æ—Ç–º–µ–Ω–µ–Ω")
            except:
                pass
            if spam_id in self.active_spam:
                del self.active_spam[spam_id]
            self.bot.storage.remove_mention(spam_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–ø–∞–º–µ {spam_id}: {e}")
            try:
                await event.edit(f"{config.ERROR_EMOJI} –û—à–∏–±–∫–∞ –≤ —Å–ø–∞–º–µ!")
            except:
                pass
    
    async def cancel_mention_by_id(self, mention_id: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ —Å–ø–∞–º –ø–æ ID
        
        Args:
            mention_id: ID —É–ø–æ–º–∏–Ω–∞–Ω–∏—è/—Å–ø–∞–º–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ/—Å–ø–∞–º –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–º–µ–Ω–µ–Ω, –∏–Ω–∞—á–µ False
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
        if mention_id in self.active_mentions:
            task = self.active_mentions[mention_id]
            task.cancel()
            del self.active_mentions[mention_id]
            self.bot.storage.remove_mention(mention_id)
            logger.info(f"–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ {mention_id} –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å–ø–∞–º–µ
        if mention_id in self.active_spam:
            task = self.active_spam[mention_id]
            task.cancel()
            del self.active_spam[mention_id]
            self.bot.storage.remove_mention(mention_id)
            logger.info(f"–°–ø–∞–º {mention_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
            return True
            
        return False
    
    async def cancel_mentions(self) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        cancelled_count = 0
        
        # –û—Ç–º–µ–Ω—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for mention_id, task in list(self.active_mentions.items()):
            task.cancel()
            cancelled_count += 1
        
        # –û—Ç–º–µ–Ω—è–µ–º —Å–ø–∞–º
        for spam_id, task in list(self.active_spam.items()):
            task.cancel()
            cancelled_count += 1
        
        self.active_mentions.clear()
        self.active_spam.clear()
        self.bot.storage.clear_mentions()
        
        return cancelled_count
    
    async def get_active_mentions(self) -> List[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —Å–ø–∞–º–∞"""
        mentions = []
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for mention_id in self.active_mentions.keys():
            mention_data = self.bot.storage.get_mention(mention_id)
            if mention_data:
                mentions.append(mention_data)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∞–º
        for spam_id in self.active_spam.keys():
            spam_data = self.bot.storage.get_mention(spam_id)
            if spam_data:
                mentions.append(spam_data)
        
        return mentions
    
    async def restore_mentions(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            saved_mentions = self.bot.storage.get_all_mentions()
            
            for mention_data in saved_mentions:
                # –î–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —Å–ø–∞–º–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                # —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
                # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                mention_id = mention_data.get('id')
                if mention_id:
                    self.bot.storage.remove_mention(mention_id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ/—Å–ø–∞–º {mention_id}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")