#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
from typing import Optional

class TimeParser:
    """–ü–∞—Ä—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    def __init__(self):
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
        self.time_pattern = re.compile(r'^(\d+)([smhd])$', re.IGNORECASE)
        
        # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥—ã
        self.multipliers = {
            's': 1,      # —Å–µ–∫—É–Ω–¥—ã
            'm': 60,     # –º–∏–Ω—É—Ç—ã  
            'h': 3600,   # —á–∞—Å—ã
            'd': 86400   # –¥–Ω–∏
        }
    
    def parse_time(self, time_str: str) -> Optional[int]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        - 30s - 30 —Å–µ–∫—É–Ω–¥
        - 5m - 5 –º–∏–Ω—É—Ç
        - 2h - 2 —á–∞—Å–∞  
        - 1d - 1 –¥–µ–Ω—å
        
        Args:
            time_str: –°—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "30s", "5m")
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
        """
        if not time_str:
            return None
            
        match = self.time_pattern.match(time_str.strip())
        if not match:
            return None
        
        try:
            number = int(match.group(1))
            unit = match.group(2).lower()
            
            if unit not in self.multipliers:
                return None
            
            if number <= 0:
                return None
                
            return number * self.multipliers[unit]
            
        except (ValueError, AttributeError):
            return None
    
    def seconds_to_string(self, seconds: int) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É
        
        Args:
            seconds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "1—á 30–º 45—Å"
        """
        if seconds <= 0:
            return "0—Å"
        
        parts = []
        
        # –î–Ω–∏
        if seconds >= 86400:
            days = seconds // 86400
            parts.append(f"{days}–¥")
            seconds %= 86400
        
        # –ß–∞—Å—ã
        if seconds >= 3600:
            hours = seconds // 3600
            parts.append(f"{hours}—á")
            seconds %= 3600
        
        # –ú–∏–Ω—É—Ç—ã
        if seconds >= 60:
            minutes = seconds // 60
            parts.append(f"{minutes}–º")
            seconds %= 60
        
        # –°–µ–∫—É–Ω–¥—ã
        if seconds > 0:
            parts.append(f"{seconds}—Å")
        
        return " ".join(parts)
    
    def validate_time_range(self, seconds: int, min_seconds: int = 1, max_seconds: int = 86400) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        
        Args:
            seconds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            min_seconds: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
            max_seconds: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞)
            
        Returns:
            True –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        """
        return min_seconds <= seconds <= max_seconds
    
    def parse_interval(self, interval_str: str) -> Optional[float]:
        """
        –ü–∞—Ä—Å–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        - 1s, 2s - —Å–µ–∫—É–Ω–¥—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float)
        - 500ms - –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã  
        
        Args:
            interval_str: –°—Ç—Ä–æ–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            
        Returns:
            –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (float) –∏–ª–∏ None
        """
        if not interval_str:
            return None
        
        # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        ms_pattern = re.compile(r'^(\d+)ms$', re.IGNORECASE)
        ms_match = ms_pattern.match(interval_str.strip())
        if ms_match:
            try:
                ms = int(ms_match.group(1))
                return ms / 1000.0
            except ValueError:
                return None
        
        # –°–µ–∫—É–Ω–¥—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ)
        s_pattern = re.compile(r'^(\d+(?:\.\d+)?)s$', re.IGNORECASE)
        s_match = s_pattern.match(interval_str.strip())
        if s_match:
            try:
                return float(s_match.group(1))
            except ValueError:
                return None
        
        return None
    
    def format_duration(self, start_time, end_time = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        
        Args:
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (datetime)
            end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (datetime), –µ—Å–ª–∏ None - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        from datetime import datetime
        
        if end_time is None:
            end_time = datetime.now()
        
        duration = end_time - start_time
        total_seconds = int(duration.total_seconds())
        
        return self.seconds_to_string(total_seconds)
    
    def get_time_units_help(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –µ–¥–∏–Ω–∏—Ü–∞–º –≤—Ä–µ–º–µ–Ω–∏"""
        return """
üìñ **–ï–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏:**
‚Ä¢ `s` - —Å–µ–∫—É–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30s)
‚Ä¢ `m` - –º–∏–Ω—É—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5m) 
‚Ä¢ `h` - —á–∞—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2h)
‚Ä¢ `d` - –¥–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1d)

üìù **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/timer 30s` - —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
‚Ä¢ `/wake 5m` - –±—É–¥–∏–ª—å–Ω–∏–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
‚Ä¢ `/remind 2h "–≤—Å—Ç—Ä–µ—á–∞"` - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
        """.strip()